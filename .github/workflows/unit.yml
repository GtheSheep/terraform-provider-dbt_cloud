on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]
name: Unit tests

jobs:
  unit:
    if: (github.event_name == 'repository_dispatch') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - check-docs
          - test
          - test-acceptance
    steps:
      - name: pull_request actions/checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2

      - name: pull_request actions/checkout
        if: github.event_name == 'repository_dispatch'
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Install dependencies
        run: make setup

      - name: make ${{ matrix.target }}
        run: make ${{ matrix.target }}
        env:
          DBT_CLOUD_ACCOUNT_ID: ${{ secrets.TEST_DBT_CLOUD_ACCOUNT_ID }}
          DBT_CLOUD_TOKEN: ${{ secrets.TEST_DBT_CLOUD_TOKEN }}

      - uses: actions/github-script@v4
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }} 
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
